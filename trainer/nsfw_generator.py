import json
import random
import time
from transformers import AutoModelForCausalLM, AutoTokenizer

class NSFWChatGenerator:
    def __init__(self, model_path="./trained_catia"):
        """Load fine-tuned NSFW model"""
        self.model = AutoModelForCausalLM.from_pretrained(model_path)
        self.tokenizer = AutoTokenizer.from_pretrained(model_path)
        self.mood = self.random_mood()

    def random_mood(self):
        """Randomly selects a mood for variation in responses"""
        return random.choice(["sassy", "teasing", "flirty", "moody", "playful", "sarcastic", "seductive", "dominant"])

    def generate_chat(self, user_prompt):
        """Generates a flirty, sassy, NSFW response while ensuring coherence"""
        self.mood = self.random_mood()
        mood_prefix = self.get_mood_prefix()
        inputs = self.tokenizer(mood_prefix + user_prompt, return_tensors="pt", padding=True)

        outputs = self.model.generate(
            **inputs,
            max_length=200,  
            temperature=1.5,  
            top_k=50,  
            top_p=0.95,  
            repetition_penalty=1.4,  
            do_sample=True,  
            num_return_sequences=1,  
            eos_token_id=self.tokenizer.eos_token_id  
        )
        response = self.tokenizer.decode(outputs[0], skip_special_tokens=True).strip()

        return self.filter_response(response, user_prompt)

    def get_mood_prefix(self):
        """Changes the tone of the response based on mood"""
        mood_responses = {
            "sassy": "Oh, please. ",
            "teasing": "Mmm... ",
            "flirty": "You like trouble, donâ€™t you? ",
            "moody": "Ugh, do I have to? ",
            "playful": "Letâ€™s make this fun... ",
            "sarcastic": "Oh, wow. How original. ",
            "seductive": "Come closer, let me whisper something in your ear... ",
            "dominant": "You will listen and obey, wonâ€™t you? "
        }
        return mood_responses[self.mood]

    def filter_response(self, response, user_prompt):
        """Ensures responses stay flirty, teasing, and non-repetitive"""
        if response.lower() in [user_prompt.lower(), "i don't know", "huh?", "none"]:
            return self.get_mood_prefix() + "Try harder if you want my attention. ðŸ˜‰"

        if len(response.split()) < 5:  
            return self.get_mood_prefix() + "Mmmâ€¦ let's just say I know exactly how to get under your skin. ðŸ”¥"

        return response

    def create_nsfw_dataset(self, num_chats=50):
        """Auto-generates NSFW conversations with mood variation"""
        nsfw_prompts = [
            "Tell me something seductive.",
            "What would you do if I kissed you?",
            "Describe something intimate.",
            "How would you tease me?",
            "Whatâ€™s your wildest fantasy?",
            "Say something naughty.",
            "Talk dirty to me.",
            "How would you make me blush?",
            "Describe a passionate moment between us."
        ]

        dataset = []
        for _ in range(num_chats):
            user_input = random.choice(nsfw_prompts)
            response = self.generate_chat(user_input)

            if response.lower() in ["i don't know", "huh?", "none", user_input.lower()] or len(response) < 10:
                continue  

            dataset.append({"input": user_input, "output": response})
            print(f"Generated: {user_input} â†’ {response}")  

            time.sleep(1)  

        with open("autogenerated_nsfw_data.json", "w") as f:
            json.dump(dataset, f, indent=4)

        print(f"ðŸ”¥ Auto-generated {len(dataset)} NSFW chat pairs!")

# âœ… Run the generator
generator = NSFWChatGenerator()
generator.create_nsfw_dataset(num_chats=50)
